// a script that generates TIME_WAIT TCP connections in as fast as possible
// the hard limit of number of TCP connections in TIME_WAIT state is
// net.ipv4.tcp_max_tw_buckets, which is 65536 in docker and 262144 in my dev
// server
// the TIME_WAIT connections generated by this script is not even close to this
// limit: it's around 25K~26K on dev server. according to cpu usage kernel seems
// to doing some throttling, but not really sure
// this script is mainly for confirming whether i will run into trouble with
// `TcpStream::connect` when there are too many connections in TIME_WAIT that
// exhausted port numbers (around 28K in total). seems like kernel never allows
// that to happen (maybe it is throttling exact for this reason?), so i am safe
// for now
// tentatively keep this script until i understand everything about it

use std::net::SocketAddr;

use tokio::{
    io::AsyncReadExt,
    net::{TcpListener, TcpStream},
    spawn,
};

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let listener = TcpListener::bind(SocketAddr::from(([0, 0, 0, 0], 8000))).await?;
    let listen_session = spawn(async move {
        let mut buf = [0; 1];
        // let mut conns = Vec::new();
        loop {
            let (mut conn, _) = listener.accept().await?;
            let _ = conn.read(&mut buf).await?;
            // conns.push(conn)
        }
    });
    // let mut sessions = tokio::task::JoinSet::new();
    // for _ in 0..4 {
    let connect_session = async {
        // let mut streams = Vec::new();
        for _ in 0.. {
            // for j in 0..2 {
            let stream = TcpStream::connect(SocketAddr::from(([127, 0, 0, 1], 8000))).await?;
            // println!("{i} {stream:?}");
            drop(stream)
            // streams.push(stream)
            // }
        }
        Ok(())
    };
    // sessions.spawn(connect_session);
    // }
    tokio::select! {
        result = listen_session => result?,
        // Some(result) = sessions.join_next() => result?,
        result = connect_session => result
    }
}
